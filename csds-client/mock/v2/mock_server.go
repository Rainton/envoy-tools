// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/envoyproxy/go-control-plane/envoy/service/status/v2 (interfaces: ClientStatusDiscoveryServiceServer,ClientStatusDiscoveryService_StreamClientStatusClient,ClientStatusDiscoveryServiceClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	envoy_service_status_v2 "github.com/envoyproxy/go-control-plane/envoy/service/status/v2"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockClientStatusDiscoveryServiceServer is a mock of ClientStatusDiscoveryServiceServer interface
type MockClientStatusDiscoveryServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockClientStatusDiscoveryServiceServerMockRecorder
}

// MockClientStatusDiscoveryServiceServerMockRecorder is the mock recorder for MockClientStatusDiscoveryServiceServer
type MockClientStatusDiscoveryServiceServerMockRecorder struct {
	mock *MockClientStatusDiscoveryServiceServer
}

// NewMockClientStatusDiscoveryServiceServer creates a new mock instance
func NewMockClientStatusDiscoveryServiceServer(ctrl *gomock.Controller) *MockClientStatusDiscoveryServiceServer {
	mock := &MockClientStatusDiscoveryServiceServer{ctrl: ctrl}
	mock.recorder = &MockClientStatusDiscoveryServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientStatusDiscoveryServiceServer) EXPECT() *MockClientStatusDiscoveryServiceServerMockRecorder {
	return m.recorder
}

// FetchClientStatus mocks base method
func (m *MockClientStatusDiscoveryServiceServer) FetchClientStatus(arg0 context.Context, arg1 *envoy_service_status_v2.ClientStatusRequest) (*envoy_service_status_v2.ClientStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchClientStatus", arg0, arg1)
	ret0, _ := ret[0].(*envoy_service_status_v2.ClientStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchClientStatus indicates an expected call of FetchClientStatus
func (mr *MockClientStatusDiscoveryServiceServerMockRecorder) FetchClientStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchClientStatus", reflect.TypeOf((*MockClientStatusDiscoveryServiceServer)(nil).FetchClientStatus), arg0, arg1)
}

// StreamClientStatus mocks base method
func (m *MockClientStatusDiscoveryServiceServer) StreamClientStatus(arg0 envoy_service_status_v2.ClientStatusDiscoveryService_StreamClientStatusServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamClientStatus", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamClientStatus indicates an expected call of StreamClientStatus
func (mr *MockClientStatusDiscoveryServiceServerMockRecorder) StreamClientStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamClientStatus", reflect.TypeOf((*MockClientStatusDiscoveryServiceServer)(nil).StreamClientStatus), arg0)
}

// MockClientStatusDiscoveryService_StreamClientStatusClient is a mock of ClientStatusDiscoveryService_StreamClientStatusClient interface
type MockClientStatusDiscoveryService_StreamClientStatusClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientStatusDiscoveryService_StreamClientStatusClientMockRecorder
}

// MockClientStatusDiscoveryService_StreamClientStatusClientMockRecorder is the mock recorder for MockClientStatusDiscoveryService_StreamClientStatusClient
type MockClientStatusDiscoveryService_StreamClientStatusClientMockRecorder struct {
	mock *MockClientStatusDiscoveryService_StreamClientStatusClient
}

// NewMockClientStatusDiscoveryService_StreamClientStatusClient creates a new mock instance
func NewMockClientStatusDiscoveryService_StreamClientStatusClient(ctrl *gomock.Controller) *MockClientStatusDiscoveryService_StreamClientStatusClient {
	mock := &MockClientStatusDiscoveryService_StreamClientStatusClient{ctrl: ctrl}
	mock.recorder = &MockClientStatusDiscoveryService_StreamClientStatusClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientStatusDiscoveryService_StreamClientStatusClient) EXPECT() *MockClientStatusDiscoveryService_StreamClientStatusClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockClientStatusDiscoveryService_StreamClientStatusClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockClientStatusDiscoveryService_StreamClientStatusClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockClientStatusDiscoveryService_StreamClientStatusClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockClientStatusDiscoveryService_StreamClientStatusClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockClientStatusDiscoveryService_StreamClientStatusClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockClientStatusDiscoveryService_StreamClientStatusClient)(nil).Context))
}

// Header mocks base method
func (m *MockClientStatusDiscoveryService_StreamClientStatusClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockClientStatusDiscoveryService_StreamClientStatusClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockClientStatusDiscoveryService_StreamClientStatusClient)(nil).Header))
}

// Recv mocks base method
func (m *MockClientStatusDiscoveryService_StreamClientStatusClient) Recv() (*envoy_service_status_v2.ClientStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*envoy_service_status_v2.ClientStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockClientStatusDiscoveryService_StreamClientStatusClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockClientStatusDiscoveryService_StreamClientStatusClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockClientStatusDiscoveryService_StreamClientStatusClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockClientStatusDiscoveryService_StreamClientStatusClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockClientStatusDiscoveryService_StreamClientStatusClient)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockClientStatusDiscoveryService_StreamClientStatusClient) Send(arg0 *envoy_service_status_v2.ClientStatusRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockClientStatusDiscoveryService_StreamClientStatusClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockClientStatusDiscoveryService_StreamClientStatusClient)(nil).Send), arg0)
}

// SendMsg mocks base method
func (m *MockClientStatusDiscoveryService_StreamClientStatusClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockClientStatusDiscoveryService_StreamClientStatusClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockClientStatusDiscoveryService_StreamClientStatusClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockClientStatusDiscoveryService_StreamClientStatusClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockClientStatusDiscoveryService_StreamClientStatusClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockClientStatusDiscoveryService_StreamClientStatusClient)(nil).Trailer))
}

// MockClientStatusDiscoveryServiceClient is a mock of ClientStatusDiscoveryServiceClient interface
type MockClientStatusDiscoveryServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientStatusDiscoveryServiceClientMockRecorder
}

// MockClientStatusDiscoveryServiceClientMockRecorder is the mock recorder for MockClientStatusDiscoveryServiceClient
type MockClientStatusDiscoveryServiceClientMockRecorder struct {
	mock *MockClientStatusDiscoveryServiceClient
}

// NewMockClientStatusDiscoveryServiceClient creates a new mock instance
func NewMockClientStatusDiscoveryServiceClient(ctrl *gomock.Controller) *MockClientStatusDiscoveryServiceClient {
	mock := &MockClientStatusDiscoveryServiceClient{ctrl: ctrl}
	mock.recorder = &MockClientStatusDiscoveryServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientStatusDiscoveryServiceClient) EXPECT() *MockClientStatusDiscoveryServiceClientMockRecorder {
	return m.recorder
}

// FetchClientStatus mocks base method
func (m *MockClientStatusDiscoveryServiceClient) FetchClientStatus(arg0 context.Context, arg1 *envoy_service_status_v2.ClientStatusRequest, arg2 ...grpc.CallOption) (*envoy_service_status_v2.ClientStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchClientStatus", varargs...)
	ret0, _ := ret[0].(*envoy_service_status_v2.ClientStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchClientStatus indicates an expected call of FetchClientStatus
func (mr *MockClientStatusDiscoveryServiceClientMockRecorder) FetchClientStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchClientStatus", reflect.TypeOf((*MockClientStatusDiscoveryServiceClient)(nil).FetchClientStatus), varargs...)
}

// StreamClientStatus mocks base method
func (m *MockClientStatusDiscoveryServiceClient) StreamClientStatus(arg0 context.Context, arg1 ...grpc.CallOption) (envoy_service_status_v2.ClientStatusDiscoveryService_StreamClientStatusClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamClientStatus", varargs...)
	ret0, _ := ret[0].(envoy_service_status_v2.ClientStatusDiscoveryService_StreamClientStatusClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamClientStatus indicates an expected call of StreamClientStatus
func (mr *MockClientStatusDiscoveryServiceClientMockRecorder) StreamClientStatus(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamClientStatus", reflect.TypeOf((*MockClientStatusDiscoveryServiceClient)(nil).StreamClientStatus), varargs...)
}
